document.addEventListener('DOMContentLoaded', () => {
    const searchBtn = document.getElementById('searchBtn');
    const searchInput = document.getElementById('searchInput');
    const resultsDiv = document.getElementById('results');

    // –í–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    const localImages = {
        '–ø–∏—Ü—Ü–∞': ['url1.jpg', 'url2.jpg'],
        '–∫–æ—à–∫–∏': ['url3.jpg', 'url4.jpg']
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Pinterest
    async function searchPinterest(query) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
            const proxyUrl = 'https://cors-anywhere.herokuapp.com/';
            const pinterestUrl = `https://www.pinterest.com/resource/BaseSearchResource/get/?data=${encodeURIComponent(JSON.stringify({
                options: {
                    query: query,
                    scope: "pins",
                    page_size: 24  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                }
            }))}`;

            const response = await fetch(proxyUrl + pinterestUrl, {
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            return data.resource_response.data.results.map(pin => {
                return {
                    url: pin.images.orig.url,
                    description: pin.description || ''
                };
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ Pinterest:', error);
            return [];
        }
    }

    async function executeSearch() {
        const query = searchInput.value.trim().toLowerCase();
        if (!query) {
            showMessage('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å', 'error');
            return;
        }

        showLoading();
        searchBtn.disabled = true;

        try {
            // 1. –ü—Ä–æ–±—É–µ–º Pinterest
            let pinterestResults = await searchPinterest(query);
            
            // 2. –ï—Å–ª–∏ Pinterest –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
            if (pinterestResults.length === 0 && localImages[query]) {
                pinterestResults = localImages[query].map(url => ({ url }));
            }

            displayResults(pinterestResults);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showMessage('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', 'error');
        } finally {
            searchBtn.disabled = false;
        }
    }

    function displayResults(images) {
        if (!images.length) {
            showMessage('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }

        resultsDiv.innerHTML = images.slice(0, 24).map((img, i) => `
            <div class="image-card">
                <img src="${img.url}" 
                     alt="${img.description || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}"
                     loading="lazy"
                     onerror="this.onerror=null;this.src='https://via.placeholder.com/300x200?text=–û—à–∏–±–∫–∞+–∑–∞–≥—Ä—É–∑–∫–∏'">
                <div class="image-actions">
                    <a href="${img.url}" target="_blank">üîç –û—Ç–∫—Ä—ã—Ç—å</a>
                    <a href="${img.url}" download="pinterest_${i}.jpg">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å</a>
                </div>
            </div>
        `).join('');
    }

    searchBtn.addEventListener('click', executeSearch);
    searchInput.addEventListener('keypress', (e) => e.key === 'Enter' && executeSearch());
});