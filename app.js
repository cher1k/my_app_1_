document.addEventListener('DOMContentLoaded', () => {
    const searchBtn = document.getElementById('searchBtn');
    const searchInput = document.getElementById('searchInput');
    const resultsDiv = document.getElementById('results');

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–∑–∞–≥–ª—É—à–∫–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ–≥–¥–∞)
    const localImages = {
        nature: [
            'https://www.gstatic.com/webp/gallery/1.jpg',
            'https://www.gstatic.com/webp/gallery/2.jpg',
            'https://www.gstatic.com/webp/gallery/4.jpg'
        ],
        animals: [
            'https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_November_2010-1a.jpg',
            'https://upload.wikimedia.org/wikipedia/commons/3/3a/Cat03.jpg',
            'https://upload.wikimedia.org/wikipedia/commons/6/66/An_up-close_picture_of_a_curious_male_domestic_shorthair_tabby_cat.jpg'
        ],
        food: [
            'https://upload.wikimedia.org/wikipedia/commons/6/6d/Good_Food_Display_-_NCI_Visuals_Online.jpg',
            'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Weekend_brunch.jpg/1200px-Weekend_brunch.jpg',
            'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Pizza_%281%29.jpg/1200px-Pizza_%281%29.jpg'
        ]
    };

    searchBtn.addEventListener('click', executeSearch);
    searchInput.addEventListener('keypress', (e) => e.key === 'Enter' && executeSearch());

    function executeSearch() {
        const query = searchInput.value.trim().toLowerCase();
        if (!query) {
            showMessage('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'error');
            return;
        }

        showMessage('üîç –ò—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏...', 'loading');
        searchBtn.disabled = true;

        setTimeout(() => {
            try {
                let images = [];
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if (/–ø—Ä–∏—Ä–æ–¥|–ø–µ–π–∑–∞–∂|–ª–µ—Å|–≥–æ—Ä–∞/.test(query)) {
                    images = [...localImages.nature];
                } 
                else if (/–∫–æ—Ç|–∫–æ—à|–∂–∏–≤–æ—Ç|–ø—ë—Å|—Å–æ–±–∞–∫/.test(query)) {
                    images = [...localImages.animals];
                }
                else if (/–µ–¥–∞|–∫—É–ª–∏–Ω|–ø–∏—Ü—Ü|–±—É—Ä–≥–µ—Ä/.test(query)) {
                    images = [...localImages.food];
                }
                else {
                    // –°–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    images = [
                        ...localImages.nature,
                        ...localImages.animals,
                        ...localImages.food
                    ].sort(() => 0.5 - Math.random()).slice(0, 3);
                }

                displayResults(images);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                showMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
            } finally {
                searchBtn.disabled = false;
            }
        }, 500);
    }

    function displayResults(images) {
        if (!images || images.length === 0) {
            showMessage('üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            return;
        }

        resultsDiv.innerHTML = images.map((img, index) => `
            <div class="image-card">
                <img src="${img}" 
                     alt="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞"
                     onerror="this.onerror=null;this.src='https://via.placeholder.com/300x200?text=–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ+–Ω–µ+–∑–∞–≥—Ä—É–∂–µ–Ω–æ'">
                <div class="image-actions">
                    <button onclick="window.open('${img}', '_blank')">
                        üîç –û—Ç–∫—Ä—ã—Ç—å
                    </button>
                    <a href="${img}" download="image_${index}.jpg">
                        ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å
                    </a>
                </div>
            </div>
        `).join('');
    }

    function showMessage(text, type) {
        resultsDiv.innerHTML = `<div class="${type}">${text}</div>`;
    }
});
const localImages = {
    nature: [
        // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ URL –∑–¥–µ—Å—å
        'https://example.com/nature1.jpg',
        'https://example.com/nature2.jpg'
    ],
    // ...
};