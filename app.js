// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
let model;
let use;
const userPreferences = JSON.parse(localStorage.getItem('aiPreferences')) || {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π TensorFlow
async function loadModels() {
    console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ò–ò...");
    [model, use] = await Promise.all([
        tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/model.json'),
        use.load()
    ]);
    console.log("–ú–æ–¥–µ–ª–∏ –ò–ò –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async function processSearch() {
    const query = document.getElementById('searchInput').value.trim();
    if (!query) return;

    showLoading(true);
    clearResults();

    try {
        // –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        const embeddings = await use.embed(query);
        const prediction = model.predict(embeddings);
        const sentiment = prediction.dataSync()[0];

        // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è)
        const images = await searchImages(query, sentiment);

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        displayResults(images);
        showAIResponse(`–ò–ò –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å: "${query}". ${getSentimentText(sentiment)}`);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!userPreferences.queries) userPreferences.queries = {};
        userPreferences.queries[query] = { sentiment, timestamp: Date.now() };
        savePreferences();

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        showAIResponse("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", true);
    } finally {
        showLoading(false);
    }
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function searchImages(query, sentiment) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API Pinterest –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    return new Promise(resolve => {
        setTimeout(() => {
            const count = sentiment > 0.6 ? 9 : 6; // –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            const images = [];
            
            for (let i = 0; i < count; i++) {
                images.push({
                    url: `https://source.unsplash.com/random/300x200/?${encodeURIComponent(query)}${i}`,
                    id: `${query}-${i}`
                });
            }
            
            resolve(images);
        }, 800);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayResults(images) {
    const container = document.getElementById('results');
    container.innerHTML = images.map(img => `
        <div class="card">
            <img src="${img.url}" alt="${img.id}" loading="lazy">
            <div class="card-content">
                <div class="feedback-buttons">
                    <button class="feedback-btn like-btn" data-id="${img.id}">üëç –ù—Ä–∞–≤–∏—Ç—Å—è</button>
                    <button class="feedback-btn dislike-btn" data-id="${img.id}">üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è</button>
                </div>
            </div>
        </div>
    `).join('');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ feedback
    document.querySelectorAll('.like-btn').forEach(btn => {
        btn.addEventListener('click', () => handleFeedback(btn.dataset.id, true));
    });
    
    document.querySelectorAll('.dislike-btn').forEach(btn => {
        btn.addEventListener('click', () => handleFeedback(btn.dataset.id, false));
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ feedback
function handleFeedback(imageId, isPositive) {
    if (!userPreferences.feedback) userPreferences.feedback = {};
    userPreferences.feedback[imageId] = isPositive;
    savePreferences();
    
    showAIResponse(`–°–ø–∞—Å–∏–±–æ! –ò–ò —É—á—Ç–µ—Ç –≤–∞—à–µ ${isPositive ? '–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ' : '–Ω–µ–æ–¥–æ–±—Ä–µ–Ω–∏–µ'} –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading(show) {
    document.getElementById('loading').style.display = show ? 'block' : 'none';
}

function clearResults() {
    document.getElementById('results').innerHTML = '';
}

function showAIResponse(message, isError = false) {
    const el = document.getElementById('aiResponse');
    el.textContent = message;
    el.style.display = 'block';
    el.style.background = isError ? '#ffebee' : '#e3f2fd';
    el.style.color = isError ? '#c62828' : '#1565c0';
}

function getSentimentText(score) {
    if (score > 0.7) return "–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π";
    if (score < 0.3) return "–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π";
    return "–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π";
}

function savePreferences() {
    localStorage.setItem('aiPreferences', JSON.stringify(userPreferences));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    await loadModels();
    
    document.getElementById('searchBtn').addEventListener('click', processSearch);
    document.getElementById('searchInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') processSearch();
    });
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.getElementById('searchInput').value = "–∫—Ä–∞—Å–∏–≤—ã–µ –ø–µ–π–∑–∞–∂–∏";
    processSearch();
}); 

async function searchImages(query) {
    const response = await fetch(`https://api.pinterest.com/v3/search/?query=${query}`);
    const data = await response.json();
    return data.pins.map(pin => ({
        url: pin.image.original.url,
        id: pin.id
    }));
} 

// –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ loadModels()
async function retrainModel() {
    // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ userPreferences
} 

async function searchImages(query) {
    const [pins, unsplash] = await Promise.all([
        fetchPinterest(query),
        fetchUnsplash(query)
    ]);
    return [...pins, ...unsplash];
} 

